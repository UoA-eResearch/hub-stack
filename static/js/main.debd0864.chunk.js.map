{"version":3,"sources":["components/Page.tsx","components/Field.tsx","components/Dialog.tsx","index.tsx"],"names":["Page","props","CustomLinkActions","inheritedProps","sdk","locale","locales","default","onLinkExisting","index","contentTypes","field","items","validations","filter","validation","hasOwnProperty","flatMap","linkContentType","getContentTypesAcceptedByField","dialogs","selectMultipleEntries","then","entries","length","subhubSys","entry","getSys","Promise","all","map","pageSys","console","log","id","type","resolve","space","getEntries","checkPageReferences","sys","results","failedEntries","i","hasMultiplePages","failedPageNames","title","fields","page","failedPage","failedPageList","name","join","paragraphBeginning","nextStep","openAlert","message","doFailedAlertDialog","onLinkedExisting","catch","reason","Field","useEffect","window","startAutoResizer","stopAutoResizer","viewType","hasCardEditActions","isInitiallyDisabled","parameters","instance","showCreateEntityAction","showLinkEntityAction","renderCustomActions","Dialog","init","root","document","getElementById","location","locations","LOCATION_ENTRY_FIELD","component","LOCATION_DIALOG","LOCATION_PAGE","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.debd0864.chunk.js","sourcesContent":["import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { PageExtensionSDK } from '@contentful/app-sdk';\n\ninterface PageProps {\n  sdk: PageExtensionSDK;\n}\n\nconst Page = (props: PageProps) => {\n  return <Paragraph>Hello Page Component</Paragraph>;\n};\n\nexport default Page;\n","import React, { useEffect } from 'react';\nimport { CollectionResponse, EntrySys, FieldExtensionSDK } from '@contentful/app-sdk';\nimport { CombinedLinkActions, MultipleEntryReferenceEditor } from '@contentful/field-editor-reference';\nimport { Entry } from '@contentful/field-editor-reference/dist/types';\nimport { LinkActionsProps } from '@contentful/field-editor-reference/dist/components';\nimport \"./Field.css\";\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nfunction checkPageReferences(sdk: FieldExtensionSDK, subhubSys: EntrySys, pageSys: EntrySys): Promise<Boolean> {\n  console.log(`Checking page reference for subhub ${subhubSys.id} and page ${pageSys.id}`);\n  // First, check if the content author is trying to link a subhub to itself.\n  if (subhubSys.type === pageSys.type && subhubSys.id === pageSys.id) {\n    console.log(\"Subhub and page are the same, rejecting.\");\n    return Promise.resolve(false);\n  }\n  // Fetch other subhubs that have links to this page.\n  return sdk.space.getEntries({\n    \"content_type\": \"subHub\",\n    \"fields.internalPages.sys.id\": pageSys.id,\n    \"sys.id[ne]\": subhubSys.id\n  }).then((entries: CollectionResponse<Object>) => {\n    console.log(`Found ${entries.items.length} other Subhub(s) that contain this page.`);\n    if (entries.items.length > 0) {\n      console.log(\"Other SubHub(s) containing this page\",entries.items);\n    }\n    return entries.items.length === 0;\n  });\n}\n\nconst doFailedAlertDialog = (sdk: FieldExtensionSDK, hasMultiplePages: boolean, failedPageNames : string[]) => {\n  const page = hasMultiplePages ? \"pages\" : \"page\";\n  const failedPage = failedPageNames.length > 1 ? \"these pages\" : \"this page\";\n  const failedPageList = failedPageNames.map(name => \"\\\"\" + name + \"\\\"\").join(\", \");\n  const paragraphBeginning = hasMultiplePages ? \"Some of the existing pages\" : \"The existing page\";\n  const nextStep = hasMultiplePages ? `Try adding ${failedPage} to the External Pages field instead: ${failedPageList}.` : \"Try adding the page to the External Pages field instead.\"\n  sdk.dialogs.openAlert({\n    title: `Adding existing ${page} in SubHub Internal Pages field failed`,\n    message: `${paragraphBeginning} you added failed our link check. Pages may only be added to one SubHub's Internal Pages field, and SubHubs may not link to themselves. \\\n    The External Pages field does not have these limitations. ${nextStep}`\n  });\n};\n\n/**\n * Determine and return all the content types accepted by the internalPages field.\n * @param sdk The field SDK\n */\nconst getContentTypesAcceptedByField = (sdk: FieldExtensionSDK) => {\n  if (sdk.field.items && sdk.field.items.validations) {\n    const contentTypeValidations = sdk.field.items.validations.filter(validation => validation.hasOwnProperty(\"linkContentType\")) as Array<any>;\n    return contentTypeValidations.flatMap(validation => validation.linkContentType || []);\n  } else {\n    return []; // By default, all content types should be allowable in this collection.\n  }\n\n};\n\ninterface CustomLinkActionsProps {\n  inheritedProps: LinkActionsProps,\n  sdk: FieldExtensionSDK\n};\n\nconst CustomLinkActions = ({inheritedProps:props, sdk}: CustomLinkActionsProps) => {\n  const locale = sdk.locales.default;\n  return <CombinedLinkActions\n  {...props}\n  onLinkExisting={index => {\n    // This callback is called when the user wants to \"link\" existing pages to the subhub's internalPages collection.\n    const contentTypes = getContentTypesAcceptedByField(sdk);\n    sdk.dialogs\n      .selectMultipleEntries({\n        locale: sdk.field.locale,\n        contentTypes\n      })\n      .then((entries) => {\n        if (!entries || entries.length === 0) {\n          return;\n        }\n        // Check all entries are ok.\n        const subhubSys = sdk.entry.getSys();\n        return Promise.all(\n          entries.map(entry => checkPageReferences(sdk, subhubSys, (entry as Entry).sys))\n        ).then(results => {\n          const failedEntries = entries.filter((entry, i) => !results[i]);\n          if (failedEntries.length === 0) {\n            // All OK! Will add all entries to entry list.\n            props.onLinkedExisting(entries as Entry[], index);\n            return;\n          } else {\n            // There were some pages that didn't pass the check. Do not allow them to be entered.\n            const hasMultiplePages = entries.length !== 1;\n            const failedPageNames = failedEntries.map(entry => {\n              const title = (entry as Entry).fields.title;\n              return title ? title[locale] : \"(Untitled content)\";\n            });\n            doFailedAlertDialog(sdk, hasMultiplePages, failedPageNames);\n            return;\n          }\n        });\n      }).catch(reason => {\n        sdk.dialogs.openAlert({\n          title: \"Error occurred in the SubHub link-checking application\",\n          message: \"Sorry, an error occurred while adding your page(s) to the SubHub Internal Pages field. \" +\n            \"Please try again. If problems persist, please message the ResearchHub team for assistance.\"\n        });\n        console.log(\"Error occurred in SubHub link-checking application\", reason);\n      });\n  }}\n/>\n};\n\nconst Field = ({ sdk }: FieldProps) => {\n  useEffect(() => {\n    sdk.window.startAutoResizer();\n    return () => {\n      sdk.window.stopAutoResizer();\n    }\n  }, [sdk.window]);\n  return <MultipleEntryReferenceEditor\n      viewType=\"link\"\n      hasCardEditActions={true}\n      sdk={sdk}\n      isInitiallyDisabled={true}\n      parameters={{\n        instance: {\n          showCreateEntityAction: true,\n          showLinkEntityAction: true,\n        },\n      }}\n      renderCustomActions={\n        props => <CustomLinkActions inheritedProps={props} sdk={sdk}/>\n      }\n    />;\n\n};\n\nexport default Field;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { DialogExtensionSDK } from '@contentful/app-sdk';\n\ninterface DialogProps {\n  sdk: DialogExtensionSDK;\n}\n\nconst Dialog = (props: DialogProps) => {\n  return <Paragraph>Hello Dialog Component</Paragraph>;\n};\n\nexport default Dialog;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  FieldExtensionSDK,\n  DialogExtensionSDK,\n  PageExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Page from './components/Page';\nimport Field from './components/Field';\nimport Dialog from './components/Dialog';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={sdk as FieldExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_DIALOG,\n        component: <Dialog sdk={sdk as DialogExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_PAGE,\n        component: <Page sdk={sdk as PageExtensionSDK} />,\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}